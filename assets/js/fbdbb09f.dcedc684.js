"use strict";(self.webpackChunktev2_specifications=self.webpackChunktev2_specifications||[]).push([[9936],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>u});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(r),u=n,f=h["".concat(l,".").concat(u)]||h[u]||d[u]||o;return r?a.createElement(f,i(i({ref:t},p),{},{components:r})):a.createElement(f,i({ref:t},p))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},5162:(e,t,r)=>{r.d(t,{Z:()=>i});var a=r(7294),n=r(6010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:r,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,n.Z)(o,i),hidden:r},t)}},4866:(e,t,r)=>{r.d(t,{Z:()=>w});var a=r(3117),n=r(7294),o=r(6010),i=r(2466),s=r(6775),l=r(1980),c=r(7392),p=r(12);function d(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:r,attributes:a,default:n}}=e;return{value:t,label:r,attributes:a,default:n}}))}function h(e){const{values:t,children:r}=e;return(0,n.useMemo)((()=>{const e=t??d(r);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function u(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:r}=e;const a=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,l._X)(o),(0,n.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function m(e){const{defaultValue:t,queryString:r=!1,groupId:a}=e,o=h(e),[i,s]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=r.find((e=>e.default))??r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[l,c]=f({queryString:r,groupId:a}),[d,m]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,p.Nk)(r);return[a,(0,n.useCallback)((e=>{r&&o.set(e)}),[r,o])]}({groupId:a}),g=(()=>{const e=l??d;return u({value:e,tabValues:o})?e:null})();(0,n.useLayoutEffect)((()=>{g&&s(g)}),[g]);return{selectedValue:i,selectValue:(0,n.useCallback)((e=>{if(!u({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),m(e)}),[c,m,o]),tabValues:o}}var g=r(2389);const v="tabList__CuJ",k="tabItem_LNqP";function b(e){let{className:t,block:r,selectedValue:s,selectValue:l,tabValues:c}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),h=e=>{const t=e.currentTarget,r=p.indexOf(t),a=c[r].value;a!==s&&(d(t),l(a))},u=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const r=p.indexOf(e.currentTarget)+1;t=p[r]??p[0];break}case"ArrowLeft":{const r=p.indexOf(e.currentTarget)-1;t=p[r]??p[p.length-1];break}}t?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},t)},c.map((e=>{let{value:t,label:r,attributes:i}=e;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>p.push(e),onKeyDown:u,onClick:h},i,{className:(0,o.Z)("tabs__item",k,i?.className,{"tabs__item--active":s===t})}),r??t)})))}function y(e){let{lazy:t,children:r,selectedValue:a}=e;const o=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function x(e){const t=m(e);return n.createElement("div",{className:(0,o.Z)("tabs-container",v)},n.createElement(b,(0,a.Z)({},e,t)),n.createElement(y,(0,a.Z)({},e,t)))}function w(e){const t=(0,g.Z)();return n.createElement(x,(0,a.Z)({key:String(t)},e))}},869:(e,t,r)=>{r.d(t,{Z:()=>l});var a=r(7294),n=r(6775);const o="apiTable_e8hp";function i(e,t){let{name:r,children:o}=e;const i=function(e){let t=e;for(;(0,a.isValidElement)(t);)[t]=a.Children.toArray(t.props.children);return t}(o),s=r?`${r}-${i}`:i,l=`#${s}`,c=(0,n.k6)();return a.createElement("tr",{id:s,tabIndex:0,ref:c.location.hash===l?t:void 0,onClick:e=>{"A"===e.target.tagName.toUpperCase()||c.push(l)},onKeyDown:e=>{"Enter"===e.key&&c.push(l)}},o.props.children)}const s=a.forwardRef(i);function l(e){let{children:t,name:r}=e;const[n,i]=a.Children.toArray(t.props.children),l=(0,a.useRef)(null);(0,a.useEffect)((()=>{l.current?.focus()}),[l]);const c=a.Children.map(i.props.children,(e=>a.createElement(s,{name:r,ref:l},e)));return a.createElement("table",{className:o},n,a.createElement("tbody",null,c))}},8236:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>f,frontMatter:()=>l,metadata:()=>p,toc:()=>h});var a=r(3117),n=(r(7294),r(3905)),o=(r(4996),r(4866)),i=r(5162),s=r(869);const l={id:"converter-profile",displayed_sidebar:"tev2SideBar",term:"converter-profile",termType:"concept",glossaryTerm:"Converter Profile",glossaryText:"a data object, of a type that is specific for a [text conversion tool](@), that [converters](@) use to create texts by which the [tool](text-conversion-tool@) will replace the text constructs that are located by its [interpreter](@).",grouptags:[],formPhrases:["converter-profile{ss}","profile{ss}"],status:"proposed",created:20231218,updated:20240108,contributors:"RieksJ",attribution:"[TNO Terminology Design](https://tno-terminology-design.github.io/tev2-specifications/docs)",originalLicense:"[CC BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1)"},c="Converter Profile",p={unversionedId:"terms/converter-profile",id:"terms/converter-profile",title:"Converter Profile",description:"A converter profile is a data object, of a type that is specific for a text conversion tool. The replacement texts that a text conversion tool creates, are compiled according to the information in the converter profile object. The object defines the available information that converters and their helper functions can use to create texts.",source:"@site/docs/terms/converter-profile.md",sourceDirName:"terms",slug:"/terms/converter-profile",permalink:"/tev2-specifications/docs/terms/converter-profile",draft:!1,editUrl:"https://github.com/tno-terminology-design/tev2-specifications/blob/master/docs/terms/converter-profile.md",tags:[],version:"current",lastUpdatedBy:"Rieks",lastUpdatedAt:1709045477,formattedLastUpdatedAt:"Feb 27, 2024",frontMatter:{id:"converter-profile",displayed_sidebar:"tev2SideBar",term:"converter-profile",termType:"concept",glossaryTerm:"Converter Profile",glossaryText:"a data object, of a type that is specific for a [text conversion tool](@), that [converters](@) use to create texts by which the [tool](text-conversion-tool@) will replace the text constructs that are located by its [interpreter](@).",grouptags:[],formPhrases:["converter-profile{ss}","profile{ss}"],status:"proposed",created:20231218,updated:20240108,contributors:"RieksJ",attribution:"[TNO Terminology Design](https://tno-terminology-design.github.io/tev2-specifications/docs)",originalLicense:"[CC BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1)"},sidebar:"tev2SideBar"},d={},h=[{value:"Converter Profile Object",id:"object",level:2},{value:"<code>err</code> fields",id:"err-fields",level:3},{value:"Helper functions",id:"helpers",level:2},{value:"<code>capFirst</code>",id:"capfirst",level:3},{value:"<code>noRefs</code>",id:"norefs",level:3},{value:"<code>regularize</code>",id:"regularize",level:3},{value:"<code>localize</code>",id:"localize",level:3}],u={toc:h};function f(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"converter-profile"},"Converter Profile"),(0,n.kt)("p",null,"A ",(0,n.kt)("strong",{parentName:"p"},"converter profile")," is a data object, of a type that is specific for a ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/tev2-text-conversion-tool",title:"TEv2 Text Conversion Tool: a TEv2 Tool whose purpose is to convert particular text constructs (such as TermRefs or MRGRefs) that exist in one or more files with other texts, the contents of which consists of some fixed construct that is populated with elements derived from existing text constructs and/or other resources."},"text conversion tool"),". The replacement texts that a ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/tev2-text-conversion-tool",title:"TEv2 Text Conversion Tool: a TEv2 Tool whose purpose is to convert particular text constructs (such as TermRefs or MRGRefs) that exist in one or more files with other texts, the contents of which consists of some fixed construct that is populated with elements derived from existing text constructs and/or other resources."},"text conversion tool")," creates, are compiled according to the information in the converter profile object. The object defines the available information that ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/converter",title:"Converter: a specification, in the form of a Handlebars Expression, for constructing a text that a particular Text Conversion Tool uses to create its output."},"converters")," and their helper functions can use to create texts."),(0,n.kt)("p",null,"The generic workings of ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/converter-profile",title:"Converter Profile: a data object, of a type that is specific for a Text Conversion Tool, that Converters use to create texts by which the Tool will replace the text constructs that are located by its Interpreter."},"converter profiles")," is documented in the ",(0,n.kt)("a",{parentName:"p",href:"/docs/overview/tev2-text-conversion"},"TEv2 Text Conversion pattern"),"."),(0,n.kt)("h2",{id:"object"},"Converter Profile Object"),(0,n.kt)("p",null,"The converter profile object can be envisaged as a YAML object, that has a number of sections. Every converter profile object has the following sections, but individual ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/tev2-text-conversion-tool",title:"TEv2 Text Conversion Tool: a TEv2 Tool whose purpose is to convert particular text constructs (such as TermRefs or MRGRefs) that exist in one or more files with other texts, the contents of which consists of some fixed construct that is populated with elements derived from existing text constructs and/or other resources."},"text-conversion-tool"),' may specify additional sections (or fields), which can be found in the section "Converter Profile" of their specifications.'),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Example"),"Here is an example of what a converter profile object might look like for the ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/term-ref",title:"TermRef: a word or phrase that is Marked Up (in A Specific Way) so that it refers to a particular Concept (or other Semantic Unit), enabling it to be rendered in a variety of ways for the purpose of helping Readers to (better) understand the intention of its Author."},"TermRef")," `[converter profile object](converter-profile#object@)`",(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'int:\n  type: "default"\n  regex: /(?:(?<=[^`\\\\])|^)\\[(?=[^@\\n\\]]+\\]\\([^@)]*@[:a-z0-9_-]*\\))(?<showtext>[^@\\n\\]]+)\\]\\((?:(?:(?<type>[a-z0-9_-]*):)?)(?:(?<term>[^@\\n:#)]*?)?(?:#(?<trait>[^@\\n:#)]*))?)?@(?<scopetag>[a-z0-9_-]*)(?::(?<vsntag>[a-z0-9_-]*))?\\)/g\nref:\n  showtext: "converter profile object"\n  type: ""\n  term: "converter-profile"\n  trait: "object"\n  scopetag: ""\n  vsntag: ""\nentry:\n  id: "converter-profile"\n  displayed_sidebar: "tev2SideBar"\n  term: "converter-profile"\n  termType: "concept"\n  glossaryTerm: "Converter Profile"\n  glossaryText: "a data object, of a type that is specific for a <a href="/tev2-specifications/docs/terms/tev2-text-conversion-tool" title="TEv2 Text Conversion Tool: a TEv2 Tool whose purpose is to convert particular text constructs (such as TermRefs or MRGRefs) that exist in one or more files with other texts, the contents of which consists of some fixed construct that is populated with elements derived from existing text constructs and/or other resources.">text conversion tool</a>, that <a href="/tev2-specifications/docs/terms/converter" title="Converter: a specification, in the form of a Handlebars Expression, for constructing a text that a particular Text Conversion Tool uses to create its output.">converters</a> use to create texts by which the <a href="/tev2-specifications/docs/terms/tev2-text-conversion-tool" title="TEv2 Text Conversion Tool: a TEv2 Tool whose purpose is to convert particular text constructs (such as TermRefs or MRGRefs) that exist in one or more files with other texts, the contents of which consists of some fixed construct that is populated with elements derived from existing text constructs and/or other resources.">tool</a> will replace the text constructs that are located by its <a href="/tev2-specifications/docs/terms/interpreter" title="Interpreter: a Regex that is used to locate a particular text construct (such as a TermRef or MRGRef) in a text, and that populates Named Capturing Groups as specified in the Interpreter Profile of the particular Text Conversion Tool for which it is designed.">interpreter</a>."\n  grouptags: []\n  formPhrases:\n    - "converter-profile"\n    - "converter-profiles"\n    - "converter-profile-s"\n    - "profile"\n    - "profiles"\n    - "profile-s"\n  status: "proposed"\n  created: 20231218\n  updated: 20240108\n  contributors: "RieksJ"\n  attribution: "[TNO Terminology Design](https://tno-terminology-design.github.io/tev2-specifications/docs)"\n  originalLicense: "[CC BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1)"\n  scopetag: "termdsn"\n  locator: "converter-profile.md"\n  navurl: "https://tno-terminology-design.github.io/tev2-specifications/docs/terms/converter-profile"\n  headingids:\n    - "converter-profile"\n    - "object"\n    - "`err`-fields"\n    - "helpers"\n    - "capfirst"\n    - "ifvalue"\n    - "localize"\n    - "norefs"\n    - "regularize"\n  termid: "concept:converter-profile"\n  vsntag: "documentation"\nmrg:\n  scopetag: "tev2"\n  scopedir: "https://github.com/tno-terminology-design/tev2-specifications/tree/master/docs"\n  curatedir: "terms"\n  glossarydir: "glossaries"\n  defaultvsn: "documentation"\n  website: "https://tno-terminology-design.github.io/tev2-specifications/docs"\n  navpath: "/terms"\n  navid: "id"\n  license: "LICENSE.md"\n  statuses:\n    - "proposed"\n    - "approved"\n    - "deprecated"\n  issues: "https://github.com/tno-terminology-design/tev2-specifications/issues"\n  curators:\n    - name: "RieksJ"\n      email:\n        id: "rieks.joosten"\n        at: "tno.nl"\n  defaulttype: "concept"\n  vsntag: "documentation"\n  altvsntags:\n    - "latest"\nerr:\n  file: "12-trrt.md"\n  dir: "/specs/tools"\n  line: 73\n  pos: 9\n  cause: ""\n'))),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Section"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"int")),(0,n.kt)("td",{parentName:"tr",align:null},"(interpreter): includes the interpreter type ",(0,n.kt)("inlineCode",{parentName:"td"},"int.type"),' (either the name of a predefined interpreter, or "custom"), and the regex used to locate the reference ',(0,n.kt)("inlineCode",{parentName:"td"},"int.regex"),". The ",(0,n.kt)("inlineCode",{parentName:"td"},"noRefs")," helper, for instance, accesses the ",(0,n.kt)("inlineCode",{parentName:"td"},"int.regex")," to be used as the default type.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"ref")),(0,n.kt)("td",{parentName:"tr",align:null},"(reference): the set of properties derived from the ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/named-capturing-group",title:"Named Capturing Group: a sub-pattern within a Regex (called a 'Capturing Group') that has been given a name, allowing one to refer to that sub-pattern."},"named capturing groups")," by the ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/interpreter",title:"Interpreter: a Regex that is used to locate a particular text construct (such as a TermRef or MRGRef) in a text, and that populates Named Capturing Groups as specified in the Interpreter Profile of the particular Text Conversion Tool for which it is designed."},"interpreter"),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"entry")),(0,n.kt)("td",{parentName:"tr",align:null},"(MRG entry): all fields from the specific ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/mrg-entry",title:"MRG Entry: A machine-readable (and interpretable) artifact that contains (pointers to) data and meta-data about a particular  Semantic Unit, such as the associated Term(s), its Definition, etc., to make it easy for IT-tools to create, e.g. documentation, Glossaries, Dictionaries, whitepapers, etc. that uses such Terms (Definitions, etc.)."},"MRG entry")," that was selected.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"mrg")),(0,n.kt)("td",{parentName:"tr",align:null},"(MRG): all fields from the ",(0,n.kt)("a",{href:"/tev2-specifications/docs/specs/files/mrg#terminology",title:"Machine Readable Glossary: a Glossary for a particular (version of a) Terminology that is formatted in YAML, according to the TEv2 MRG Specifications, to enable automated processing and integration with software systems."},"terminology section")," of the ",(0,n.kt)("a",{href:"/tev2-specifications/docs/specs/files/mrg",title:"Machine Readable Glossary: a Glossary for a particular (version of a) Terminology that is formatted in YAML, according to the TEv2 MRG Specifications, to enable automated processing and integration with software systems."},"mrg")," from which the ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/mrg-entry",title:"MRG Entry: A machine-readable (and interpretable) artifact that contains (pointers to) data and meta-data about a particular  Semantic Unit, such as the associated Term(s), its Definition, etc., to make it easy for IT-tools to create, e.g. documentation, Glossaries, Dictionaries, whitepapers, etc. that uses such Terms (Definitions, etc.)."},"MRG entry")," was taken.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"err")),(0,n.kt)("td",{parentName:"tr",align:null},"(error): various fields, as specified below, that can be used to construct output that helps users identify an error, and fix it.")))),(0,n.kt)("p",null,"Fields from the ",(0,n.kt)("inlineCode",{parentName:"p"},"entry")," section may also be used in ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/converter",title:"Converter: a specification, in the form of a Handlebars Expression, for constructing a text that a particular Text Conversion Tool uses to create its output."},"converters")," without specifying ",(0,n.kt)("inlineCode",{parentName:"p"},"entry")," as a prefix (e.g., ",(0,n.kt)("inlineCode",{parentName:"p"},"entry.term")," becomes ",(0,n.kt)("inlineCode",{parentName:"p"},"term"),"). Properties of ",(0,n.kt)("inlineCode",{parentName:"p"},"entry")," with identical names to sections of the converter profile object, are overwritten by the defined sections."),(0,n.kt)("h3",{id:"err-fields"},(0,n.kt)("inlineCode",{parentName:"h3"},"err")," fields"),(0,n.kt)("p",null,"When a file is being processed by a ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/tev2-text-conversion-tool",title:"TEv2 Text Conversion Tool: a TEv2 Tool whose purpose is to convert particular text constructs (such as TermRefs or MRGRefs) that exist in one or more files with other texts, the contents of which consists of some fixed construct that is populated with elements derived from existing text constructs and/or other resources."},"text conversion tool"),", it can happen that an input structure is found that cannot be associated with an ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/mrg-entry",title:"MRG Entry: A machine-readable (and interpretable) artifact that contains (pointers to) data and meta-data about a particular  Semantic Unit, such as the associated Term(s), its Definition, etc., to make it easy for IT-tools to create, e.g. documentation, Glossaries, Dictionaries, whitepapers, etc. that uses such Terms (Definitions, etc.)."},"MRG entry"),". The ",(0,n.kt)("inlineCode",{parentName:"p"},"err")," section in a converter profile object contains fields that can help construct outputs that help users to identify, and fix, such errors, as follows."),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Legend"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"strong"},"Field"))," contains the field name;"),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"strong"},"Req'd"))," specifies whether (",(0,n.kt)("inlineCode",{parentName:"li"},"Y"),") or not (",(0,n.kt)("inlineCode",{parentName:"li"},"n"),", or ",(0,n.kt)("inlineCode",{parentName:"li"},"F"),") the field is always populated, or optional."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"strong"},"Description"))," specifies the meaning of the field, and other things you may need to know, e.g. why it is needed, a required syntax, etc."))),(0,n.kt)(s.Z,{mdxType:"APITable"},(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Field"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Req'd"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"file")),(0,n.kt)("td",{parentName:"tr",align:"center"},"Y"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Name of the file, including the extension, where the specific reference was found.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"dir")),(0,n.kt)("td",{parentName:"tr",align:"center"},"Y"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Relative directory path from the location the tool was called to the directory where the ",(0,n.kt)("inlineCode",{parentName:"td"},"file")," was found.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"line")),(0,n.kt)("td",{parentName:"tr",align:"center"},"Y"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Linenumber in the file where the reference was found.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"pos")),(0,n.kt)("td",{parentName:"tr",align:"center"},"Y"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Position on the line of the start of the reference that was found.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"cause")),(0,n.kt)("td",{parentName:"tr",align:"center"},"n"),(0,n.kt)("td",{parentName:"tr",align:"left"},"A description of the cause of a possible error."))))),(0,n.kt)("h2",{id:"helpers"},"Helper functions"),(0,n.kt)("p",null,"Multiple custom ",(0,n.kt)("a",{parentName:"p",href:"https://handlebarsjs.com/guide/expressions.html#helpers"},"helper functions")," have been specified in addition to the ",(0,n.kt)("a",{parentName:"p",href:"https://handlebarsjs.com/guide/builtin-helpers.html"},"built-in helper functions")," of ",(0,n.kt)("a",{parentName:"p",href:"https://handlebarsjs.com/guide/#what-is-handlebars"},"Handlebars"),", which can be used within ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/handlebars-expression",title:"Handlebars Expression: a specific syntax used in the popular templating engine 'Handlebars', which enables one to specify texts (e.g., HTML templates) in which dynamic data (as provided, e.g., by Moustache Variables) is placed. See Handlebars for further details."},"handlebars expressions")," to modify the ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/converter",title:"Converter: a specification, in the form of a Handlebars Expression, for constructing a text that a particular Text Conversion Tool uses to create its output."},"converter")," output. The input given to a helper function is always the evaluated value of the expression that follows the call, possibly with extra options."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Mustache expression format"',title:'"Mustache',expression:!0,'format"':!0},'// highlight-next-line\n{{<helper> <element> <argument>="<value>"}}\n{{capFirst entry.term}}\n{{noRefs entry.glossaryText type="markdown"}}\n')),(0,n.kt)("h3",{id:"capfirst"},(0,n.kt)("inlineCode",{parentName:"h3"},"capFirst")),(0,n.kt)("p",null,"The function of the helper ",(0,n.kt)("inlineCode",{parentName:"p"},"capFirst")," is to capitalize every first character from every word in a string."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=\"Examples for 'capFirst'\"",title:'"Examples',for:!0,"'capFirst'\"":!0},'{{capFirst entry.glossaryTerm}}   # e.g. "converter profile" becomes "Converter Profile"\n{{capFirst entry.glossaryText}}   # e.g. "This is a description; for SOME TERM" becomes "This Is A Description; For SOME TERM"\n')),(0,n.kt)("p",null,"The helper ",(0,n.kt)("inlineCode",{parentName:"p"},"capFirst")," replaces the first character of every word of its argument with the capitalized equivalent.\nWords are obtained by splitting the input on space characters.",(0,n.kt)("br",null),"\n",(0,n.kt)("em",{parentName:"p"},"It takes a string as input, splits the string at spaces, capitalizes the first character of every split item,\nreconstructs the input string fomr the split items, and returns the result.")),(0,n.kt)("h3",{id:"norefs"},(0,n.kt)("inlineCode",{parentName:"h3"},"noRefs")),(0,n.kt)("p",null,"The function of the helper ",(0,n.kt)("inlineCode",{parentName:"p"},"noRefs")," is to replace all ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/term-ref",title:"TermRef: a word or phrase that is Marked Up (in A Specific Way) so that it refers to a particular Concept (or other Semantic Unit), enabling it to be rendered in a variety of ways for the purpose of helping Readers to (better) understand the intention of its Author."},"TermRefs")," from a string, with its (capitalized) ",(0,n.kt)("a",{parentName:"p",href:"@"},"showtext"),". Capitalization is done by the helper ",(0,n.kt)("inlineCode",{parentName:"p"},"capFirst"),"."),(0,n.kt)("p",null,"The following tabs show how this helper works on the following input:"),(0,n.kt)("hr",null),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-txt"},'  [Markdown](link), <a href="link">HTML</a>, `[showtext](someterm@somescope)`\n')),(0,n.kt)(o.Z,{defaultValue:"default",values:[{label:"(No type specified)",value:"default"},{label:'type="markdown"',value:"single"},{label:'type="markdown, html, interpreter"',value:"multiple"},{label:'type="/[(?<showtext>[^]]+)]((?:[^)]+))/, html"',value:"multiple-with-regex"}],mdxType:"Tabs"},(0,n.kt)(i.Z,{value:"default",mdxType:"TabItem"},(0,n.kt)("p",null,"Calling ",(0,n.kt)("inlineCode",{parentName:"p"},"{{noRefs entry.glossaryText}}")," results in:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-txt"},'  [Markdown](link), <a href="link">HTML</a>, Showtext\n'))),(0,n.kt)(i.Z,{value:"single",mdxType:"TabItem"},(0,n.kt)("p",null,"Calling ",(0,n.kt)("inlineCode",{parentName:"p"},'{{noRefs entry.glossaryText type="markdown"}}')," results in:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-txt"},'  Markdown, <a href="link">HTML</a>, Showtext\n'))),(0,n.kt)(i.Z,{value:"multiple",mdxType:"TabItem"},(0,n.kt)("p",null,"Calling ",(0,n.kt)("inlineCode",{parentName:"p"},'{{noRefs entry.glossaryText type="markdown, html, interpreter"}}')," results in:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-txt"},"  Markdown, HTML, Showtext\n")),(0,n.kt)("p",null,"Note that the ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/term-ref",title:"TermRef: a word or phrase that is Marked Up (in A Specific Way) so that it refers to a particular Concept (or other Semantic Unit), enabling it to be rendered in a variety of ways for the purpose of helping Readers to (better) understand the intention of its Author."},"TermRef")," is also seen as a markdown link, and hence remo")),(0,n.kt)(i.Z,{value:"multiple-with-regex",mdxType:"TabItem"},(0,n.kt)("p",null,"Calling ",(0,n.kt)("inlineCode",{parentName:"p"},'{{noRefs entry.glossaryText type="/\\[(?<showtext>[^\\]]+)\\]\\((?:[^)]+)\\)/, html"}}')," results in:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-txt"},"  Markdown, HTML, Showtext\n")))),(0,n.kt)("hr",null),(0,n.kt)("p",null,"The helper ",(0,n.kt)("inlineCode",{parentName:"p"},"noRefs")," uses the configured ",(0,n.kt)("inlineCode",{parentName:"p"},"type")," to convert all references to the ",(0,n.kt)("inlineCode",{parentName:"p"},"showtext")," property of the interpreted reference.\nIt also capitalizes the ",(0,n.kt)("inlineCode",{parentName:"p"},"showtext")," replacement using the ",(0,n.kt)("inlineCode",{parentName:"p"},"capFirst")," helper.",(0,n.kt)("br",null),"\n",(0,n.kt)("em",{parentName:"p"},"It takes the input, finds matches using the configured syntax-",(0,n.kt)("inlineCode",{parentName:"em"},"type"),"\nand uses the capitalized interpreted ",(0,n.kt)("inlineCode",{parentName:"em"},"showtext")," property as a replacement, after which the output is returned.")),(0,n.kt)("p",null,"Three standard values are available to be used as the value for the ",(0,n.kt)("inlineCode",{parentName:"p"},"type")," option. Multiple values may be provided, in which case the values are interpreted in order from left to right. If no value is provided, '",(0,n.kt)("inlineCode",{parentName:"p"},"interpreter"),"' is used as the default ",(0,n.kt)("inlineCode",{parentName:"p"},"type"),". If a ",(0,n.kt)("inlineCode",{parentName:"p"},"type")," is provided that does not match any of the standard ",(0,n.kt)("inlineCode",{parentName:"p"},"type")," values, the value is assumed to be a custom ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/regex",title:"Regular Expression: a sequence of characters that specifies a text pattern that can be searched for within other, larger texts, for the purpose of, e.g., replacing the text pattern with some other text. Within TEv2, we use a JavaScript Flavor (ECMAScript 2022)."},"regex"),"."),(0,n.kt)("p",null,"Available ",(0,n.kt)("inlineCode",{parentName:"p"},"type")," values:"),(0,n.kt)(s.Z,{mdxType:"APITable"},(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"th"},"type")),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"interpreter")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Uses the ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/regex",title:"Regular Expression: a sequence of characters that specifies a text pattern that can be searched for within other, larger texts, for the purpose of, e.g., replacing the text pattern with some other text. Within TEv2, we use a JavaScript Flavor (ECMAScript 2022)."},"regex")," of the configured ",(0,n.kt)("a",{parentName:"td",href:"#interpreter"},"interpreter")," to find matches.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"html")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Uses the ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/regex",title:"Regular Expression: a sequence of characters that specifies a text pattern that can be searched for within other, larger texts, for the purpose of, e.g., replacing the text pattern with some other text. Within TEv2, we use a JavaScript Flavor (ECMAScript 2022)."},"regex")," ",(0,n.kt)("inlineCode",{parentName:"td"},"<a\\b[^>]*?>(?<showtext>.*?)<\\/a>")," to find HTML ",(0,n.kt)("inlineCode",{parentName:"td"},"<a>")," tags and uses the value in between the opening and closing tag as ",(0,n.kt)("inlineCode",{parentName:"td"},"showtext"),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"markdown")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Uses the ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/regex",title:"Regular Expression: a sequence of characters that specifies a text pattern that can be searched for within other, larger texts, for the purpose of, e.g., replacing the text pattern with some other text. Within TEv2, we use a JavaScript Flavor (ECMAScript 2022)."},"regex")," ",(0,n.kt)("inlineCode",{parentName:"td"},"\\[(?<showtext>[^\\]]+)\\]\\((?:[^)]+)\\)")," to find Markdown hyperlinks and uses the link text as ",(0,n.kt)("inlineCode",{parentName:"td"},"showtext"),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"custom")),(0,n.kt)("td",{parentName:"tr",align:"left"},"A value for ",(0,n.kt)("inlineCode",{parentName:"td"},"type")," that does not match any of the standard ",(0,n.kt)("inlineCode",{parentName:"td"},"type")," values is assumed to be a custom ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/regex",title:"Regular Expression: a sequence of characters that specifies a text pattern that can be searched for within other, larger texts, for the purpose of, e.g., replacing the text pattern with some other text. Within TEv2, we use a JavaScript Flavor (ECMAScript 2022)."},"regex"),"."))))),(0,n.kt)("h3",{id:"regularize"},(0,n.kt)("inlineCode",{parentName:"h3"},"regularize")),(0,n.kt)("p",null,"The function of the helper ",(0,n.kt)("inlineCode",{parentName:"p"},"regularize")," is convert human readable text into a ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/regularized-text",title:"Regularized Text: a character string that starts with a lowercase character (`[a-z]`), and has subsequent characters that match Regex `[a-z_0-9-]`, and doesn't end with a `-` character. In other words, every text that matches the Regex `^[a-z][a-z_0-9-]*(?<=[^-])$` is a regularized text."},"regularized text"),", which is a common text format within ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/tev2",title:"TEv2: a set of specifications and Tools that caters for the Curation of Terminologies, as well as for its subsequent use in publications of different types (e.g. websites, whitepapers) and formats (e.g. html, LaTeX), as appropriate for different, individual Scopes."},"TEv2")," (particularly in ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/mrg-entry",title:"MRG Entry: A machine-readable (and interpretable) artifact that contains (pointers to) data and meta-data about a particular  Semantic Unit, such as the associated Term(s), its Definition, etc., to make it easy for IT-tools to create, e.g. documentation, Glossaries, Dictionaries, whitepapers, etc. that uses such Terms (Definitions, etc.)."},"MRG entries"),") for automated processing."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=\"Examples for 'Regularize'\"",title:'"Examples',for:!0,"'Regularize'\"":!0},'// Input (entry.term): "EX(ample)"\n\n{{regularize entry.term}}\n// Output: "ex-ample"\n')),(0,n.kt)("p",null,"The helper ",(0,n.kt)("inlineCode",{parentName:"p"},"regularize")," converts the input string into a ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/regularized-text",title:"Regularized Text: a character string that starts with a lowercase character (`[a-z]`), and has subsequent characters that match Regex `[a-z_0-9-]`, and doesn't end with a `-` character. In other words, every text that matches the Regex `^[a-z][a-z_0-9-]*(?<=[^-])$` is a regularized text."},"regularized text"),", according to the ",(0,n.kt)("a",{href:"/tev2-specifications/docs/terms/regularized-text#regularization-process",title:"Regularized Text: a character string that starts with a lowercase character (`[a-z]`), and has subsequent characters that match Regex `[a-z_0-9-]`, and doesn't end with a `-` character. In other words, every text that matches the Regex `^[a-z][a-z_0-9-]*(?<=[^-])$` is a regularized text."},"regularization process"),"."),(0,n.kt)("h3",{id:"localize"},(0,n.kt)("inlineCode",{parentName:"h3"},"localize")),(0,n.kt)("p",null,"The funciton of the helper ",(0,n.kt)("inlineCode",{parentName:"p"},"localize")," is to convert an absolute URL to a relative path within a particular website context, enhancing internal navigation efficiency and consistency."),(0,n.kt)("p",null,"The website context is specified by the ",(0,n.kt)("inlineCode",{parentName:"p"},"website")," value of the ",(0,n.kt)("a",{href:"/tev2-specifications/docs/specs/files/mrg",title:"Machine Readable Glossary: a Glossary for a particular (version of a) Terminology that is formatted in YAML, according to the TEv2 MRG Specifications, to enable automated processing and integration with software systems."},"MRG")," in the converter profile."),(0,n.kt)("p",null,"The helper ",(0,n.kt)("inlineCode",{parentName:"p"},"localize")," parses the value it was given as a URL and compares it to the ",(0,n.kt)("inlineCode",{parentName:"p"},"website")," value of the ",(0,n.kt)("a",{href:"/tev2-specifications/docs/specs/files/mrg",title:"Machine Readable Glossary: a Glossary for a particular (version of a) Terminology that is formatted in YAML, according to the TEv2 MRG Specifications, to enable automated processing and integration with software systems."},"MRG")," in the converter profile. If both the ",(0,n.kt)("inlineCode",{parentName:"p"},"host")," values (e.g., tno-terminology-design.github.io) match, the ",(0,n.kt)("inlineCode",{parentName:"p"},"pathname")," of the URL is returned. If the given value cannot be interpreted as a URL, or the ",(0,n.kt)("inlineCode",{parentName:"p"},"host")," values do not match, the input value is returned. This can be useful in situations where external links (URL's pointing to a website other than the current ",(0,n.kt)("inlineCode",{parentName:"p"},"host"),") are handled differently from internal links."))}f.isMDXComponent=!0}}]);